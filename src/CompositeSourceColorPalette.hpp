/**
 * From Assembly Language Programming for the CoCo 3 by Laurency A. Tepolt
 *
 * Describing Colors
 *
 *     The basic attributes of color are its hue, saturation, and brightness. Of course there are
 * many others such as texture, glare, and glitter, but the three basic attributes serve well when
 * describing the colors generated by the CoCo 3.
 *
 * * Hue - This is a classification of the color. The hues include all the rainbow colors and those
 *       between adjacent rainbow colors such as greenish yellow.
 *
 * * Saturation - This is a measure of the vividness or amount of color in the sample. For example,
 *       medium blue is more saturated than pale blue.
 *
 * * Brithness - A measure of how light or dark the sample color is. It is easiest to imagine the
 *       color sample has a background that may vary from black, through the grays, to white. A
 *       bright color has a white background and a dark color has a black background.
 *
 * ...
 *
 * Composite Color Set
 *
 *     The composite color set is the set of colors generated on a composite monitor (or TV) by the
 * 64 color codes. When using a composite monitor the bits of the palette registers are interpreted
 * as shown in Fig. 2-3. The six bits (5-0) generate a color by specifying its hue, saturation, and
 * brightness.
 *
 *            -------------------------------
 * Bit number | 5  | 4  | 3  | 2  | 1  | 0  |
 *            -------------------------------
 * Label      | S1 | S0 | A3 | A2 | A1 | A0 |
 *            -------------------------------
 *            \________/\___________________/
 *                 |              |
 * Bright/Saturation              |
 *                                |
 *                        Hue Angle
 *
 * Fig. 2-3 Composite Palette Register
 *
 *     Bits 3-0 select a hue from a hue wheel by specifying an angle. The angles are number 0-15 and
 * select a hue as shown in Fig. 2-4. The primary colors are underlined and all the others are the
 * illusory colors. Each illusory color, except gray, is a combination of the two primary colors it
 * is between. Gray is a combination of all three primary colors. For example, indigo is mostly blue
 * and some red.
 *
 * 0  - Gray
 * 1  - _Green_
 * 2  - Greenish Yellow
 * 3  - Yellow
 * 4  - Yellowish Orange
 * 5  - Orange
 * 6  - Reddish Orange
 * 7  - _Red_
 * 8  - Reddish Magenta
 * 9  - Magenta
 * 10 - Indigo
 * 11 - _Blue_
 * 12 - Bluish Cyan
 * 13 - Cyan
 * 14 - Greenish Cyan
 * 15 - Blueish Green
 *
 * Fig. 2-4 Hue Wheel (ED: Unraveled for ASCII)
 *
 *     Bits 4 and 5 select both the brightness and saturation. They can't be selected independently.
 * Table 2-2 shows the four bit combinations and the corresponding brightness and saturation.
 *
 * -------------------------------------
 * | S1 | S0 | Brightness | Saturation |
 * -------------------------------------
 * | 0  | 0  |    low     |    high    |
 * | 0  | 1  |   medium   |   medium   |
 * | 1  | 0  |    high    |    low     |
 * | 1  | 1  | very high  |  very low  |
 * -------------------------------------
 *
 * Table 2-2. Brightness and Saturation
 *
 *     The exception to this scheme is the color generated by color code 63. It is not a bluish
 * green of a very high brightness and very low saturation. It is white. Some example of colors and
 * their codes follow:
 *
 *     Binary Code     Color
 *
 *        000000       Black
 *        000111       Dark Red
 *        011011       Medium Blue
 *
 */

#ifndef COMPOSITESOURCECOLORPALETTE_H
#define COMPOSITESOURCECOLORPALETTE_H

#include <cstdint>
#include <vector>

#include <Godot.hpp>
#include <Reference.hpp>
#include <Color.hpp>
#include <Variant.hpp>

namespace godot
{
	class CompositeSourceColorPalette : public Reference
	{
		GODOT_CLASS(CompositeSourceColorPalette, Reference)

	private:
	public:
		static const std::uint8_t MAX_SIZE = 64;
		static const float constexpr DEGREES_PER_HUE = 360.0 / 15.0;

		std::vector<Color> colors;
		std::vector<std::uint32_t> colors_data;

		// C++ Specific Definitions

		CompositeSourceColorPalette();

		~CompositeSourceColorPalette();

		// Godot Specific Definitions

		static void _register_methods();

		void _init(); // our initializer called by Godot

		// Class Definitions

		void set_color(std::uint8_t index, Variant new_value);
		Color get_color(std::uint8_t index);
	};
}

#endif