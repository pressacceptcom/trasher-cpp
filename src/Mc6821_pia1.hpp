/**
 * From the MC6821 Data Sheet / Catalog entry
 *
 * Peripheral Interface Adapter (PIA)
 *
 *     The MC6821 Peripheral Interface Adapter provides the universal means of interfacing
 * peripheral equipment to the M6800 family of microprocessors. This device is capable of
 * interfacing the MPU to peripherals through two 8-bit bidirectional peripheral data buses and
 * four control lines. No external logic is required for interfacing to most peripheral devices.
 *     The functional configuration of the PIA is programmed by the MPU during system
 * initialization. Each of the peripheral data lines can be programmed to act as an input or
 * output, and each of the four control/interrupt lines may be programmed for one of several
 * control modes. This allows a high degree of flexibility in the overall operation of the
 * interface.
 *
 * - 8-Bit Bidrectional Data Bus for Communication with the MPU
 * - Two Bidirectional 8-Bit Buses for Interface to Peripherals
 * - Two Programmable Control Registers
 * - Two Programmable Data Direction Registers
 * - Four Individually-Controlled Interrupt Input Lines; Two Usable as Peripheral Control Outputs
 * - Handshake Control Logic for Input and Output Peripheral Operation
 * - High-Impedance Three-State and Direct Transistor Drive Peripheral Lines
 * - Program Controlled Interrupt and Interrupt Disable Capability
 * - CMOS Drive Capability on Side A Peripheral Lines
 * - Two TTL Drive Capability on All A and B Side Buffers
 * - TTL-Compatible
 * - Static Operation
 *
 * PIA INTERFACE SIGNALS FOR MPU
 *
 *     The PIA interfaces to the M6800 bus with an 8-bit bidirec- tional data bus, three chip
 * select lines, two register select lines, two interrupt request lines, a read/write line, an
 * enable line and a reset line. To ensure proper operation with the MC6800, MC6802, or MC6808
 * microprocessors, VMA should be used as an active part of the address decoding.
 *
 *     Bidirectional Data (D0-D7) - The bidirectional data lines (00-07) allow the transfer of data
 * between the MPU and the PIA. The data bus output drivers are three-state devices that remain in
 * the high-impedance (off) state except when the MPU performs a PIA read operation. The read/write
 * line is in the read (high) state when the PIA is selected for a read operation.
 *
 *     Enable (E) - The enable pulse, E, is the only timing signal that is supplied to the PIA.
 * Timing of all other signals is referenced to the leading and trailing edges of the E pulse.
 *
 *     Read/Write (R/W) - This signal is generated by the MPU to control the direction of data
 * transfers on the data bus. A low state on the PIA read/write line enables the input buffers and
 * data is transferred from the MPU to the PIA on the E signal if the device has been selected. A
 * high on the read/write line sets up the PIA for a transfer of data to the bus. The PIA output
 * buffers are enabled when the proper ad- dress and the enable pulse E are present.
 *
 *     RESET - The active low RESET line is used to reset all register bits in the PIA to a logical
 * zero (low). This line can be used as a power-on reset and as a master reset during system
 * operation.
 *
 *     Chip Selects (CSO, CS1, and CS2) - These three input signals are used to select the PIA. CS0
 * and CS1 must be high and CS2 must be low for selection of the device. Data transfers are then
 * performed under the control of the enable and read/write signals. The chip select lines must be
 * stable for the duration of the E pulse. The device is deselected when any of the chip selects
 * are in the inactive state.
 *
 *     Register Selects (RSO and RS1) - The two register select lines are used to select the
 * various registers inside the PIA. These two lines are used in conjunction with internal Control
 * Registers to select a particular register that is to be written or read.
 *     The register and chip select lines should be stable for the duration of the E pulse while in
 * the read or write cycle.
 *
 *     Interrupt Request (IRQA and IRQB) - The active low In- terrupt Request lines (IROA and IROB)
 * act to interrupt the MPU either directly or through interrupt priority circuitry. These lines
 * are "open drain" (no load device on the chip). This permits all interrupt request lines to be
 * tied together in a wire-OR configuration.
 *     Each Interrupt Request line has two internal interrupt flag bits that can cause the
 * Interrupt Request line to go low. Each flag bit is associated with a particular peripheral
 * interrupt line. Also, four interrupt enable bits are provided in the PIA which may be used to
 * inhibit a particular interrupt from a peripheral device.
 *     Servicing an interrupt by the MPU may be accomplished by a software routine that, on a
 * prioritized basis, sequentially reads and tests the two control registers in each PIA for
 * interrupt flag bits that are set.
 *     The interrupt flags are cleared (zeroed) as a result of an MPU Read Peripheral Data
 * Operation of the corresponding data register. After being cleared, the interrupt flag bit cannot
 * be enabled to be set until the PIA is deselected during an E pulse. The E pulse is used to
 * condition the interrupt control lines (CA 1, CA2, CB 1, CB2). When these lines are used as
 * interrupt inputs, at least one E pulse must occur from the in- active edge to the active edge of
 * the interrupt input signal to condition the edge sense network. If the interrupt flag has been
 * enabled and the edge sense circuit has been properly conditioned, the interrupt flag will be set
 * on the next active transition of the interrupt input pin.
 *
 * PIA PERIPHERAL INTERFACE LINES
 *
 *     The PIA provides two 8-bit bidirectional data buses and four interrupt/control lines for
 * interfacing to peripheral devices.
 *
 *     Section A Peripheral Data (PAO-PA7) - Each of the peripheral data lines can be programmed to
 * act as an input or output. This is accomplished by setting a "1" in the corresponding Data
 * Direction Register bit for those lines which are to be outputs. A "0" in a bit of the Data
 * Direction Register causes the corresponding peripheral data line to act as an input. During an
 * MPU Read Peripheral Data Operation, the data on peripheral lines programmed to act as inputs
 * appears directly on the corresponding MPU Data Bus lines. In the input mode, the internal pullup
 * resistor on these lines represents a maximum of 1.5 standard TTL loads.
 *     The data in Output Register A will appear on the data lines that are programmed to be
 * outputs. A logical "1" written in- to the register will cause a "high" on the corresponding data
 * line while a "0" results in a "low." Data in Output Register A may be read by an MPU "Read
 * Peripheral Data A" operation when the corresponding lines are programmed as outputs. This data
 * will be read properly if the voltage on the peripheral data lines is greater than 2.0 volts for
 * a logic "1" output and less than 0.8 volt for a logic "0" output. Loading the output lines such
 * that the voltage on these lines does not reach full voltage causes the data transferred into the
 * MPU on a Read operation to differ from that contained in the respective bit of Output Register
 * A.
 *
 *     Section B Peripheral Data (PBO-PB7) - The peripheral data lines in the B Section of the PIA
 * can be programmed to act as either inputs or outputs in a similar manner to PA0- PA7. They have
 * three-state capabiity, allowing them to enter a high-impedance state when the peripheral data
 * line is used as an input. In addition, data on the peripheral data lines PB0-PB7 will be read
 * properly from those lines programmed as outputs even if the voltages are below 2.0 volts for a
 * "high" or above 0.8 V for a "low". As outputs, these lines are compatible with standard TTL and
 * may also be used as a source of at least 1 milliampere at 1.5 volts to directly drive the base
 * of a transistor switch.
 *
 *     Interrupt Input (CA1 and CB1) - Peripheral input lines CA 1 and CB 1 are input only lines
 * that set the interrupt flags of the control registers. The active transition for these signals
 * is also programmed by the two control registers.
 *
 *     Peripheral Control (CA2) - The peripheral control line CA2 can be programmed to act as an
 * interrupt input or as a peripheral control output. As an output, this line is compatible with
 * standard TTL; as an input the internal pullup resistor on this line represents 1.5 standard TTL
 * loads. The function of this signal line is programmed with Control Register A.
 *
 *     Peripheral Control (CB2) - Peripheral Control line CB2 may also be programmed to act as an
 * interrupt input or peripheral control output. As an input, this line has high in- put impedance
 * and is compatible with standard TTL. As an output it is compatible with standard TTL and may
 * also be used as a source of up to 1 milliampere at 1.5 volts to directly drive the base of a
 * transistor switch. This line is programmed by Control Register B.
 *
 * INTERNAL CONTROLS
 *
 * INITIALIZATION
 *     A RESET has the effect of zeroing all PIA registers. This will set PA0-PA7, PBO-PB7, CA2 and
 * CB2 as inputs, and all interrupts disabled. The PIA must be configured during the restart
 * program which follows the reset.
 *     There are six locations within the PIA accessible to the MPU data bus: two Peripheral
 * Registers, two Data Direction Registers, and two Control Registers. Selection of these locations
 * is controlled by the RS0 and RS1 inputs together with bit 2 in the Control Register, as shown in
 * Table 1.
 *     Details of possible configurations of the Data Direction and Control Register are as
 * follows:
 *
 * TABLE 1 - INTERNAL ADDRESSING
 * ---------------------------------------------------------
 * |     |     |    Control    |                           |
 * |     |     | Register Bit  |                           |
 * |     |     -----------------                           |
 * | RS1 | RS0 | CRA-2 | CRB-2 | Location Selected         |
 * ---------------------------------------------------------
 * |  0  |  0  |   1   |   x   | Peripheral Register A     |
 * ---------------------------------------------------------
 * |  0  |  0  |   0   |   x   | Data Direction Register A |
 * ---------------------------------------------------------
 * |  0  |  1  |   x   |   x   | Control Register A        |
 * ---------------------------------------------------------
 * |  1  |  0  |   x   |   1   | Peripheral Register B     |
 * ---------------------------------------------------------
 * |  1  |  0  |   x   |   0   | Data Direction Register B |
 * ---------------------------------------------------------
 * |  1  |  1  |   x   |   x   | Control Register B        |
 * ---------------------------------------------------------
 * x = Don't care
 *
 * PORT A-B HARDWARE CHARACTERISTICS
 *
 *     As shown in Figure 17, the MC6821 has a pair of 1/0 ports whose characteristics differ
 * greatly. The A side is designed to drive CMOS logic to normal 30% to 70% levels, and
 * incorporates an internal pullup device that remains connected even in the input mode. Because of
 * this, the A side requires more drive current in the input mode than Port B. In con- trast, the B
 * side uses a normal three-state NMOS buffer which cannot pullup to CMOS levels without external
 * resistors. The B side can drive extra loads such as Darl- ingtons without problem. When the PIA
 * comes out of reset, the A port represents inputs with pullup resistors, whereas the B side
 * (input mode also) will float high or low, depending upon the load connected to it.
 *     Notice the differences between a Port A and Port B read operation when in the output mode.
 * When reading Port A, the actual pin is read, whereas the B side read comes from an output latch,
 * ahead of the actual pin.
 *
 * CONTROL REGISTERS (CRA and CRB)
 *
 *     The two Control Registers (CRA and CRB) allow the MPU to control the operation of the four
 * peripheral control lines CA1, CA2, CB1, and CB2. In addition they allow the MPU to enable the
 * interrupt lines and monitor the status of the interrupt flags. Bits 0 through 5 of the two
 * registers may be writ- ten or read by the MPU when the proper chip select and register select
 * signals are applied. Bits 6 and 7 of the two registers are read only and are modified by
 * external interrupts occurring on control lines CA1, CA2, CB1, or CB2. The format of the control
 * words is shown in Figure 18.
 *
 * DATA DIRECTION ACCESS CONTROL BIT (CRA-2 and CRB-2)
 *
 *     Bit 2, in each Control Register (CRA and CRBl, deter- mines selection of either a Peripheral
 * Output Register or the corresponding Data Direction E Register when the proper register select
 * signals are applied to RS0 and RS1. A "1" in bit 2 allows access of the Peripheral Interface
 * Register, while a "0" causes the Data Direction Register to be addressed.
 *
 *     Interrupt Flags (CRA-6, CRA-7, CRB-6, and CRB-7) - The four interrupt flag bits are set by
 * active transitions of signals on the four Interrupt and Peripheral Control lines when those
 * lines are programmed to be inputs. These bits cannot be set directly from the MPU Data Bus and
 * are reset indirectly by a Read Peripheral Data Operation on the ap- propriate section.
 *
 *     Control of CA2 and CB2 Peripheral Control Lines (CRA-3, CRA-4, CRA-5, CRB-3, CRB-4, and
 * CRB-5) - Bits 3, 4, and 5 of the two control registers are used to control the CA2 and CB2
 * Peripheral Control lines. These bits determine if the con- trol lines will be an interrupt input
 * or an output control signal. If bit CRA-5 (CRB-5) is low, CA2 (CB2) is an interrupt input line
 * s1m1lar to CA1 (CB1i. When CRA-5 (CRB-5) is high, CA2 (CB2) becomes an output signal that may be
 * used to control peripheral data transfers. When in the output mode, CA2 and CB2 have slightly
 * different loading characteristics.
 *
 *     Control of CA1 and CB1 Interrupt Input Lines (CRA-0, CRB-0, CRA-1, and CRB-1) - The two
 * lowest-order bits of the control registers are used to control the interrupt input lines CA1 and
 * CB1. Bits CRA-0 and CRB-0 are used to enable the MPU interrupt signals IROA and IROB,
 * respectively. Bits CRA-1 and CRB-1 determine the active transition of the interrupt input
 * signals CA1 and CB1.
 *
 * FIGURE 18 - CONTROL WORD FORMAT
 *
 * ---------------------------------------------------------------
 * | Determine Active CA1 (CB1) Transition for Setting           |
 * |     Interrupt Flag IRQA(B)1 - (bit 7)                       |
 * | b1 = 0: IRQA(B)1 set by high-to-low transition on CA1 (CB1) |
 * | b1 = 1: IRAA(B)1 set by low-to-high transition on CA1 (CB1) |
 * ---------------------------------------------------------------
 *                       |                             ----------------------------------------------------------------------------------
 *                       ----------------------------  | CA1(CB1) Interrupt Request Enable/Disable                                      |
 *                                                  |  |                                                                                |
 * ---------------------------------------------    |  | b0 = 0: Disables IRQA(B) MPU Interrupt by CA1 (CB1) active transition.         |
 * | IQRA(B) 1 Interrupt Flag (bit 7)          |    |  | b0 = 1: Enable IRQA(B) MPU Interrupt by CA1 (CB1) active transition.           |
 * |     Goes high on active transition of CA1 |    |  | 1. IRQA(B) will occur on next (MPU generated) positive transition              |
 * | (CB1); Automatically cleared by MPU Read  |    |  |    of b0 if CA1 (CB1) active transition occurred while interrupt was disabled. |
 * | of Output Register A(B). May also be      |    |  ----------------------------------------------------------------------------------
 * | cleared by hardware Reset.                |    |                       |
 * ---------------------------------------------    -------------------     |
 *                       |                                            |     |
 *                   ----------                                    ------ ----
 *                  -----------------------------------------------------------
 *                  |    b7    |    b6    | b5 | b4 | b3 |    b2  |  b1  | b0 |
 *                  -----------------------------------------------------------
 * Control Reigster | IRQA(B)1 | IRAQ(B)2 |  CA2 (CB2)   |   DDR  | CA1 (CB1) |
 *                  |   Flag   |   Flag   |   Control    | Access |  Control  |
 *                  -----------------------------------------------------------
 *                              ---------- -------------- --------
 *                                   |                 |      |
 * --------------------------------------------------  |      |
 * | IRQA(B)2 Interrupt Flag (bit 6)                |  |   --------------------------------------------------------
 * |     When CA2 (CB2) is an input, IRQA(B) goes   |  |   | Determines Whether Data Direction Register Or Output |
 * | high on active transition CA2 (CB2);           |  |   | Register Is Addressed                                |
 * | Automatically cleared by MPU Read of Output    |  |   | b2 = 0: Data Direction Register selected.            |
 * | Register A(B). May also be cleared by hardware |  |   | b2 = 1: Output Register selected.                    |
 * | Reset.                                         |  |   --------------------------------------------------------
 * |     CA2 (CB2) Established as Output (b5 = 1):  |  |
 * | IRQA(B)2 = 0, not affected by CA2 (CB2)        |  |----------------------
 * | transitions.                                   |  |                     |
 * --------------------------------------------------  |                     |
 *                                                     |                     |
 *                      --------------------------------        --------------------------------------------------------------
 *                      |                                       | CA2 (CB2) Established as Input by b5 = 0                   |
 * ----------------------------------------------------------   |                                                            |
 * | CA2 (CB2) Established as Output by b5=1                |   | b5  b4  b3                                                 |
 * |               (Note that operation of CA2 and          |   |     |   |                                                  |
 * |                CB2 output functions are not            |   | 0   |   |---> CA2 (CB2) Interrupt Request Enable/Disable   |
 * |                identical)                              |   |     |         b3 = 0: Disables IRQA(B) MPU Interrupt by    |
 * | b5  b4  b3                                             |   |     |                 CA2 (CB2) active transition. *       |
 * |          |---> CA2                                     |   |     |         b3 = 1: Enables IRQA(B) MPU Inerrupt by CA2  |
 * | 1   0    |     b3 = 0: Read Strobe with CA1 Restore    |   |     |                 (CB2) active transition.             |
 * |          |             CA2 goes low on first high to   |   |     |         * IRQA(B) will occur on next (MPU generated) |
 * |          |             low E transition following an   |   |     |           positive transition of b3 if CA2 (CB2)     |
 * |          |             MPU read of Output Register A;  |   |     |           active transition occurred while interrupt |
 * |          |             returned high by next active    |   |     |           was disabled.                              |
 * |          |             CA1 transition, as specified    |   |     |                                                      |
 * |          |             by byte 1.                      |   |     |-------> Determines Active CA2 (CB2) Transition for   |
 * |          |     b3 = 1: Read Strobe with E Restore      |   |               Setting Interrupt Flag IRQA(B)2 - (Bit b6)   |
 * |          |             CA2 goes low on first high to   |   |               b4 = 0: IRQA(B)2 set by high to low          |
 * |          |             low E transition following an   |   |                       transition on CA2 (CB2).             |
 * |          |             MPU read of Output Register A;  |   |               b4 = 1: IRQA(B) set by low to high           |
 * |          |             returned high by next high to   |   |                       transition on CA2 (CB2).             |
 * |          |             low E transition during a       |   --------------------------------------------------------------
 * |          |             deselect.                       |
 * |          |---> CB2                                     |
 * |                b3 = 0: Write Strobe with CB1 Restore   |
 * |                        CB2 goes low on first low to    |
 * |                        E transition following an MPU   |
 * |                        write into Output Register B;   |
 * |                        returned high by the next       |
 * |                        active CB1 transition as        |
 * |                        specified by bit 1. CRB-b7      |
 * |                        must first be cleared by a read |
 * |                        of data.                        |
 * |                b3 = 1: Write Strobe with E Restore     |
 * |                        CB2 goes low on first low to    |
 * |                        high E transition following an  |
 * | b5  b4  b3             MPU write into Output Register  |
 * |         |              B; returned high by the next    |
 * | 1   1   |              low to high E transition        |
 * |         |              following an E pulse which      |
 * |         |              occurred while the part was     |
 * |         |              deselected.                     |
 * |         |                                              |
 * |         |---> Set/Reset CA2 (CB2)                      |
 * |               CA2 (CB2) goes low as MPU writes b3 = 0  |
 * |               into Control Register.                   |
 * |               CA2 (CB2) goes high as MPU write b3 = 1  |
 * |               into Control Register.                   |
 * ----------------------------------------------------------
 */

/**
 * From Assembly Language Programming for the TRS-8® Color Computer by Laurence Tepolt
 *
 * PERIPHERAL INTERFACE ADAPTER
 *
 *     It is through the two peripheral interface adapters, PIAs 1 and 2, that the MPU communicates
 * external devices: the keyboard, joysticks, cassette, and printer. One PIA is also used to
 * generate sound. Each PIA is a Motorola MC6821 large scale integrated circuit.
 *     A PIA is composed of two halves that are almost identical. One half is the A side and the
 * other side is the B side. Each side can input or output a byte of data and send an interrupt to
 * the MPU. Since the Color Computer has two PIAs, there are four data paths to input and output
 * data. Fig. 9-3 is a simplified diagram depicting a PIA with its data paths and buses.
 *     It is via the control bus that the PIA sends an interrupt to the MPU. The control & select
 * bus is used to select a particular PIA and also its A or B side. A byte is transferred between
 * the MPU and a PIA over the data bus. On the right side of the PIA are the data paths, connected
 * to other devices. Each side of a PIA has its own data path of eight bits. In addition the A side
 * has two signals - CA1 and CA2 and the B side has CB1 and CB2, which are also connected to other
 * components. Data is sent or received on a data path in a parallel fashion. A byte sent out on
 * the A side would send the individual bits 0 - 7 out on signal lines PA0-PA7, respectively. Each
 * PIA contains within it six registers, three registers in each side. This can be seen in
 * Fig. 9-3.
 *
 *                                               ---------- CA1
 *                                               |
 *                                               |  ------- CA2
 *                                               |  |
 *             ----------------------------------------
 *             |                                      |
 *             |       -------------------------      |----- PA7
 * ------------|       | Data Register A (DRA) |      |----- PA6
 *             |       -------------------------      |----- PA5
 *    Data Bus |                                      |----- PA4    Data Path A
 *             | ------------------------------------ |----- PA3
 * ------------| | Data Direction Register A (DDRA) | |----- PA2
 *             | ------------------------------------ |----- PA1
 *             |                                      |----- PA0      A Side
 *             |     ----------------------------     |
 *             |     | Control Register A (CRA) |     |
 *             |     ----------------------------     |
 * ------------|                                      |
 *             |                                      |
 *  Control &  |                                      |
 *  Select Bus |       -------------------------      |----- PB7      B Side
 *             |       | Data Register B (DRB) |      |----- PB6
 * ------------|       -------------------------      |----- PB5
 *             |                                      |----- PB4
 *             | ------------------------------------ |----- PB3    Data Path B
 *             | | Data Direction Register B (DDRB) | |----- PB2
 *             | ------------------------------------ |----- PB1
 * ------------|                                      |----- PB0
 *             |     ----------------------------     |
 * Control Bus |     | Control Register B (CRB) |     |
 *             |     ----------------------------     |
 * ------------|                                      |
 *             ----------------------------------------
 *                                               |  |
 *                                               |  ------- CB1
 *                                               |
 *                                               ---------- CB2
 *
 * Fig. 9-3 Block Diagram of a PIA.
 *
 *     Each side has a complete set of three registers, so each side can operate independently. One
 * register is the data register (DRA or DRB), through which data is sent from the MPU to the data
 * path or from the data path to the MPU. The contents of the data direction register (DDRA or
 * DDRB) control the direction the data will flow through the individual bits of the data register.
 * Remember that in and out are referenced to the MPU; out is from the MPU and in is toward the
 * MPU.
 *     The contents of the control register (CRA or CRB) control the operation of the CA1, or CB1,
 * and CA2, or CB2 signals, and whether the data register or data direction register can be
 * accessed through a dedicated address by the MPU. The operation of only the A side registers is
 * presented since they generally operate the same as the B side registers. Only the CRB operates
 * slightly differently from the CRA.
 *
 * Data Register (DRA or DRB)
 *
 *     The DRA, an eight-bit register, is accessed from the MPU through its dedicated address if
 * bit 2 of the CRA is set. When outputting the MPU can store data in the DRA, which will then be
 * outputted over data path A. When inputting the MPU can read data from the DRA, and the contents
 * of the DRA will reflect the data on data path A. It is through the DRA that the MPU can read the
 * states of the bits PA0-PA7 or send data out on the data lines PA0-PA7.
 *     Each bit of the DRA can be configured for outputting or inputting. For example, one can
 * configure DRA0-DRA3 for output and DRA4-DRA7 for input. However, a bit can be in only the output
 * or input condition. The data direction of the bits of the DRA is controlled by the DDRA.
 *
 * Data Direction Register (DDRA or DDRB)
 *
 *     The DDRA, an eight-bit register, is accessed from the MPU through the same dedicated address
 * as the DRA when bit 2 of the CRA is clear. One dedicated address is used to access either the
 * DRA or DDRA, depending on the state of bit 2 of the CRA. The contents of DDRA will configure
 * each bit of the DRA for input or output. Each bit of the DDRA controls the corresponding bit of
 * the DRA: DDRA0 controls DRA0, DDRA1 controls DRA1, etc. If a bit in the DDRA is clear, the
 * corresponding bit in the DRA is configured for inputting. If a bit in the DDRA is set, the
 * corresponding bit in the DRA is configured for outputting. For example, if the DDRA contains
 * $A5, DRA bits 1, 3, 4, and 6 are configured for inputting, and bits 0, 2, 5, and 7 are
 * configured for outputting. This is graphically shown in Fig. 9-4. The right arrow indicates
 * output only and the left arrow indicates input only. As you can see, the MC6821 is quite a
 * versatile component.
 *
 * --------------------------------
 * | DDRA = A5 | DRA | Bit Number |
 * --------------------------------
 * |     1     |  >  |     PA7    |
 * |     0     |  <  |     PA6    |
 * |     1     |  >  |     PA5    |
 * |     0     |  <  |     PA4    |
 * |     0     |  <  |     PA3    |
 * |     1     |  >  |     PA2    |
 * |     0     |  <  |     PA1    |
 * |     1     |  >  |     PA0    |
 * --------------------------------
 *
 * Control Register (CRA or CRB)
 *
 *     The CRA is the most complicated register, since it ocntrols the largest number of items. The
 * items controlled include the CA1 signal, DRA/DDRA access, and the CA2 signal, and it provides
 * indications of the states of CA1 and CA2. The CRA, an eight-bit register, is accessed via its
 * dedicated address. The MPU can read data from it and write to some of its bits. The format of
 * the CRA or CRB is shown in Fig. 9-5. Each field in the CRA or CRB will be described. All CRA
 * fields act the same as CRB except for the CA2(CB2) Control field.
 *
 * ----------------------------------------------------------------
 * |     7     |     6     |  5  |  4   |  3  |    2   |  1  |  0 |
 * ----------------------------------------------------------------
 * | Interrupt | Interrupt |                  |        |          |
 * |    Flag   |    Flag   | CA2(CB2) Control | DDR/DR | CA1(CB1) |
 * |   CA(B)1  |   CA(B)2  |                  | Access | Control  |
 * ----------------------------------------------------------------
 *
 * Fig. 9-5 PIA Control Register A(B).
 *    Courtesy of Motorola, Inc.
 *
 * - CA1(CB1) Control - The CA1 control field controls how the CA1 signal is interpreted by the
 * PIA. The CA1 signal is always configured as an input in the Color Computer. It is changed by
 * writing to the CRA(B).
 *     Bit 1, when clear, causes the CA1 signal to set an active state in the PIA when the signal
 * received by CA1 from another device changes from a high (logical 1) to a low (logical 0).
 *     Bit 1, when set, causes the CA1 signal to set an active state in the PIA when the signal
 * received by CA1 from another device changes from a low (logical 0) to a high (logical 1).
 *     Bit 0, when clear, lets the CA1 active state set bit 7 (CA1 flag) of the CRA. Bit 7 set
 * indicate that CA1 was activated by the required transition.
 *     Bit 0, when set, lets the CA1 active state set bit 7 of the CRA and send an interrupt to the
 * MPU. Bit 0 of the CRA can enable or disable the sending of interrupt generated by CA1.
 *     The above description is equally applicable to the B side of the PIA: the CRB and CB1.
 *
 * - DDR/DR Access - Bit 2 of the CRA is used to determine which register, DRA or DDRA, will be
 * accessed via their dedicated address. If bit 2 is clear, DDRA can be accessed. If bit 2 is set,
 * DRA can be accessed. The state of this bit is changed by writing it into the CRA from the MPU.
 * This description is equally applicable to the B side.
 *
 * - CA2 Control - The CA2 signal can be configured as an input or an output. In the Color Computer
 * it is used for output only. Bits 3, 4, and 5 of the CRA control the use of CA2 as shown below.
 *
 *     CA2 configured as an input: (Bit 5 = 0)
 *       Bit 4: Determines the transition that will activate the CA2 input.
 *         Bit 4 = 0: Activate upon seeing a high (logical 1) to low (logical 0) transition.
 *         Bit 4 = 1: Activate upon seeing a low to high transition.
 *       Bit 3: Allows enabling or disabling of an interrupt generated by CA2.
 *         Bit 3 = 0: Upon activation of CA2, set bit 6 (CA2 flag) of the CRA.
 *         Bit 3 = 1: Upon activation of CA2, set bit 6 (CA2 flag) of the CRA and send an interrupt
 *                    to the MPU.
 *
 *     CA2 configured as an output: (Bit 5 = 1)
 *       Bit 4 = 1: CA2 outputs a signal corresponding to the state of CRA bit 3.
 *         Bit 3 = 0: CA2 outputs a low.
 *         Bit 3 = 1: CA2 outputs a high.
 *       Bit 4 = 0: CA2 outputs a low upon the next MPU read of the DRA. Bit 3 determines what
 *                  conditions will cause CA2 to resume outputting a high.
 *         Bit 3 = 0: CA2 returns to a high upon the next active CA1 transition.
 *                 1: CA2 returns to a high after one MPU clock cycle.
 *
 * - CB2 Control - The CB2 signal can be configured as an input or an output. In the Color Computer
 * it is used for output only. Bits 3, 4, and 5 of the CRB control the use of CB2 as shown below.
 *
 *     CB2 configured as an input: (Bit 5 = 0)
 *       Bit 4: Determines the transition that will activate the CB2 input.
 *         Bit 4 = 0: Activate upon seeing a high (logical 1) to low (logical 0) transition.
 *         Bit 4 = 1: Activate upon seeing a low to high transition.
 *       Bits 3: Allows enabling or disabling of an interrupt generated by CA2.
 *         Bit 3 = 0: Upon activation of CB2, set bit 6 (CB2 flag) of the CRB.
 *         Bit 3 = 1: Upon activation of CB2, set bit 6 (CB2 flag) of the CRB and send an interrupt
 *                    to the MPU.
 *
 *     CB2 configured as an output: (Bit 5 = 1)
 *       Bit 4 = 1: CB2 outputs a signal corresponding to the state of CRB bit 3.
 *         Bit 3 = 0: CB2 outputs a low.
 *         Bit 3 = 1: CB2 outputs a high.
 *       Bit 4 = 0: CB2 outputs a low upon the next MPU write to the DRB. Bit 3 determines what
 *                  conditions will cause CB2 to resume outputting a high.
 *         Bit 3 = 0: CB2 returns to a high upon the next active CB1 transition. Bit 7 of the CRB
 *                    must have been previously cleared.
 *         Bit 3 = 1: CB2 returns to a high after one MPU clock cycle.
 *
 * Using the PIAs
 *
 *     A PIA can be configured to perform many ways; in the Color Computer, however, the PIAs are
 * connected to devices that can be used in only limited ways. Therefore, not all the PIA
 * configurations are used. Presented in this section are more details on using the PIAs and how
 * they apply to the Color Computer. Chapter 10 describes the devices and how they are connected to
 * the PIAs.
 *
 * - PIA Dedicated Addresses - Each PIA can be accessed by four primary dedicated addreses and
 * their redundant addresses if the TY bit of the SAM is clear. (See Table 9-5 for all the
 * possible addresses.) The primary dedicated addresses for each PIA register are shown in Table
 * 9-7.
 *
 * -----------------------------------
 * | Address | PIA Registers         |
 * -----------------------------------
 * |  FF00   | DRA and DDRA of PIA 1 |
 * |  FF01   | CRA of PIA 1          |
 * |  FF02   | DRB and DDRB of PIA 1 |
 * |  FF03   | CRB of PIA 1          |
 * |  FF20   | DRA and DDRA of PIA 2 |
 * |  FF21   | CRA of PIA 2          |
 * |  FF22   | DRB and DDRB of PIA 2 |
 * |  FF23   | CRB of PIA 2          |
 * -----------------------------------
 *
 * Table 9-7 Primary Dedicated Addreses of the PIA Registers.
 *
 * - Initializing the PIAs - The PIAs are initialized by BASIC when the computer is turned on. This
 * involves setting up DDRA(B), and CRA(B) for each PIA. The PIAs are first initialized by the
 * RESET signal, activated at turn on or when the Reset button is pushed. A RESET clears all the
 * registers in the PIAs. In this state, all the data register bits are configured to output and
 * interrupts are disabled.
 *     BASIC sets up the data direction and control registers of each PIA register as shown in
 * Table 9-8.
 *
 * ----------------------------
 * | PIA Register  | Contents |
 * ----------------------------
 * | DDRA of PIA 1 |    00    |
 * | CRA of PIA 1  |    34    |
 * | DDRB of PIA 1 |    FF    |
 * | CRB of PIA 1  |    35    |
 * | DDRA of PIA 2 |    FE    |
 * | CRA of PIA 2  |    30    |
 * | DDRB of PIA 2 |    F8    |
 * | CRB of PIA 2  |    30    |
 * ----------------------------
 *
 * Table 9-8 PIA Registers Initialized by BASIC.
 *
 * One can see, for example, that the A side of PIA 1 has its DRA set up to input only, and the CRA
 * is set up so CA1 interrupt are disabled, the DRA can be accessed, and CA2 is configured to
 * output a logical 0. In the Color Computer, the only CA2(CB2) configuration which is used is
 * outputting a 0 or 1 bit.
 *
 * - The Interrupt Flags - The interrupt flags are bits 6 and 7 of the control registers. Bit 7 set
 * in CRA indicates that the CA1 input has been activated. Bit 6 set in the CRA indicates the CA2
 * input has been activated. You can not change their state by writing to the CRA(CRB). You should
 * never see bit 6 set because the only configuration of CA2(CB2) usable in the Color Computer is
 * the output mode.
 *     When bit 7 of CRA(CRB) is set, it must be cleared for the PIA to be able to detect the next
 * activation of CA1(CB1). If CA1(CB1) interrupts are enabled (bit 0 of the control register set)
 * the interrupt signal will be sent to the MPU as long as bit 7 is set. Therefore the interrupt
 * handler program must clear bit 7 to acknowledge to the PIA that the interrupt was received. The
 * interrupt flag is cleared by reading the contents of the respective DRA(DRB). Upon reading the
 * data register, its content will be in an MPU register and bits 6 and 7 in the control register
 * are cleared.
 *
 * ...
 *
 *     The VDG operating mode is controlled through bits 3 - 7 of the DRB of PIA 2. The DDRB of PIA
 * 2 is initialized by BASIC so that bits 3 - 7 of the DRB are configured for output to the VDG.
 * The VDG operating modes are selected by writing a control code into the DRB of PIA 2 through its
 * dedicated address. Valid settings for the video display modes and the VDG operating modes are
 * shown in Table 9-9.
 *
 * --------------------------------------------
 * | VDG Op Mode | SAM Control Bits | Display |
 * |  7 6 5 4 3  |   V2   V1   V0   |   Mode  |
 * --------------------------------------------
 * |  0 x x 0 c  |   0    0    0    |   AI    |
 * |  0 x x 0 x  |   0    0    0    |   SG4   |
 * |  0 x x 1 c  |   0    0    0    |   SG6   |
 * |  0 x x 0 x  |   0    1    0    |   SG8   |
 * |  0 x x 0 x  |   1    0    0    |   SG12  |
 * |  0 x x 0 x  |   1    1    0    |   SG24  |
 * |  1 0 0 0 c  |   0    0    1    |   G1C   |
 * |  1 0 0 1 c  |   0    0    1    |   G1R   |
 * |  1 0 1 0 c  |   0    1    0    |   G2C   |
 * |  1 0 1 1 c  |   0    1    1    |   G2R   |
 * |  1 1 0 0 c  |   1    0    0    |   G3C   |
 * |  1 1 0 1 c  |   1    0    1    |   G3R   |
 * |  1 1 1 0 c  |   1    1    0    |   G6C   |
 * |  1 1 1 1 c  |   1    1    0    |   G6R   |
 * --------------------------------------------
 * x = don't care    c = color set (0 or 1)
 *
 * Table 9-9 Available Display Modes
 *
 * ...
 *
 * INTERRUPTS
 *
 *     In this section are described the interrupt sources and how to control their operation. The
 * IRQ interrupt originates from devices in the Color Computer, and the NMI and FIRQ from outside.
 * IRQ and FIRQ are sent to the MPU from the PIAs. It is imperative that one knows how to use the
 * PIAs to control the IRQ and FIRQ interrupts.
 *
 * Interrupt Sources
 *
 *     The IRQ and FIRQ interrupts are sent to the MPU from PIAs 1 and 2. The IRQ interrupt sources
 * are internal to the Color Computer, and are connected to CA1 and CB1 of PIA 1. The FIRQ
 * interrupt sources are external to the computer and are connected to the ROM cartridge slot.
 * Fig. 9-6 is a simplified block diagram showing the connections between the PIAs, MPU, and the
 * interrupt sources of the Color Computer. One can see there are a total of five signals which can
 * be used to generate an interrupt. Two signals can generate an IRQ interrupt, two can generate an
 * FIRQ interrupt, and one generates an NMI interrupt.
 *
 * 1  | <-> | 63.5 µs               -------
 * 0  |     |                       |     |
 *    ------------------------CA1-->|     |
 *                                  |     |
 * 1  | <-> | 16.7 ms               | PIA |                       -----------
 * 0  |     |                       |  1  |                       |         |
 *    ------------------------CB1-->|     |-----------------IRQ---|         |
 *                                  |     |                       |         |
 *                                  -------                       |         |
 *                                                                |         |
 *                                  -------                       |   MPU   |
 * READY signal                     |     |                       |         |
 * from serial----------------CA1-->|     |-----------------FIRQ--|         |
 * I/O port                         |     |                       |         |
 *                                  | PIA |                       |         |
 *                                  |  2  |            -----NMI---|         |
 *            ----------------CB1-->|     |            |          |         |
 *            |                     |     |            |          -----------
 *            |                     -------            |
 *            |                                        |
 *         ------------------------------------------------
 *         |  8        ROM Cartridge Slot              4  |
 *         ------------------------------------------------
 *
 * Fig. 9-6 Block Diagram of the Interrupt Sources.
 *
 * - IRQ Interrupts - PIA 1 is connected to the IRQ interrupt signal going to the MPU. At CA1, an
 * electrical signal form the VDG creates a transition from a high to a low (or from a low to a
 * high) once ever 63.5 microseconds, or 15,478 times a second. This signal is always present and
 * can be used to generate an IRQ interrupt at its repetition rate. At CB1 is an electrical signal
 * from the VDG that creates a transition from a high to a low (or from a low to a high) once every
 * 16.7 milliseconds or 60 times a second. The signal at CB1 is always present and can also be used
 * to generate an IRQ interrupt at its repetition rate.
 *     It appears that the signal at CA1 would cause an interrupt too often to be of much use. The
 * MPU requires about 20 microseconds to perform the IRQ interrupt sequence and another 15
 * microseconds for the RTI instruction at the end of the interrupt handler. This leaves about 28
 * microseconds for the interrupt handler to perform some task before the interrupt occurs again.
 * This is not enough time to perform very much; about 4 to 10 instructions. The signal at CB1,
 * when teh PIA is initialized, causes an interrupt at the fixed rate of 60 times a second, a much
 * more useful rate.
 *
 * - FIRQ Interrupts - PIA 2 is connected to the FIRQ interrupt signal going to the MPU. The READY
 * signal form the serial I/O port is connected to CA1. (ED: AKA, Carrier Detected or CD). A device
 * connected to the serial I/O port, when it goes from a non-ready state to a ready state, causes
 * the READY signal to go from a high to a low. If PIA 2 is configured to sense a high-to-low
 * transition at CA1, an FIRQ interrupt will be generated when the device bcomes ready. However,
 * not all devices send a READY signal to the computer. Normally, this signal means the device is
 * turned on, not busy doing something, and is readyto transfer data or receive data from the
 * computer. If PIA 2 is configured ot sense a low-to-high transition at CA1, an FIRQ interrupt
 * will be generated when the device becomes non-ready.
 *     The CB1 pin of PIA 2 is connected to pin 8 of the ROM cartridge connector. A cartridge
 * plugged in may cause an FIRQ interrupt if CB1 is configured to sense it. The ROM cartridge slot
 * is described in Chapter 10.
 *
 * - NMI Interrupts - The NMI interrupt signal line ot the MPU is connected directly to pin 4 of
 * the ROM cartridge slot. Thus, a cartridge may directly cause an NMI interrupt. Note that an NMI
 * interrupt does not require any PIAs to be configured, and that it is not maskable. The interrupt
 * sequence is initiated by a temporary low signal on pin 4 of the ROM cartridge slot connector.
 * The ROM cartridge slot is described in Chapter 10.
 *
 * Controlling PIA Interrupts
 *
 *     A PIA must be initialized ot send an interrupt to the MPU. This is done by setting or
 * clearing bits in the control registers, CRA and/or CRB, through their dedicated addresses. They
 * are bits 0 and 1 of control register A or B, which control interrupts sensed by CA1 or CB1.
 * Table 9-10 shows the dedicated addresses to use to access the control registers to control the
 * IRQ and FIRQ interrupts.
 *
 * ------------------------------------------
 * | Int. Type | Signal | Dedicated Address |
 * ------------------------------------------
 * |    IRQ    |   CA1  | FF01              |
 * |           |   CB1  | FF03              |
 * ------------------------------------------
 * |    FIRQ   |   CA1  | FF21              |
 * |           |   CB1  | FF23              |
 * ------------------------------------------
 *
 * Table 9-10 Dedicated Addresses of PIA Control Registers.
 *
 *     If bit 0 of CRA(B) is clear, that half of a PIA wil not generate an interrupt when the
 * CA(B)1 input is activated. If bit 0 is set, that half of a PIA will generate an interrupt when
 * the CA(B)1 input is activated. In either case, bit 7 of CRA(B) is set when the CA(B)1 input is
 * activated.
 *     If bit 1 of CRA(B) is clear, the CA(B)1 input will be activated whe it see a high-to-low
 * transition. If bit 1 of CRA(B) is set, that input will be activated upon seeing a low-to-high
 * transition.
 *     After a half of a PIA (A or B) has sensed an activating transition at CA(B)1, bit 7, the
 * flag bit of the CRA(B) will be set, and an interrupt may be sent to the MPU depending on the
 * state of bit 0 of the respective control register. Then the flag bit must be cleared for that
 * half of the PIA to be able to sense another CA(B)1 activation. Clearing the flag bit also causes
 * the PIA to stop sending an active interrupt signal to the MPU if bit 0 of the control register
 * is set. If this is not done, the MPU will be interrupted again as soon as the F or I bit of the
 * CC register is cleared. The flag bit is cleared by having the MPU read from the corresponding
 * data register (DRA or DRB).
 */

/**
 * From the Color Computer 3 Service Manual
 *
 * 1.4 I/O Control Registers
 *
 * ---------------------------
 * | FF00 - FF03 | PIA | IC5 |
 * ---------------------------
 *
 * FF00:
 *       BIT 0 = KEYBOARD ROW 1 and right joystick switch 1
 *       BIT 1 = KEYBOARD ROW 2 and left joystick switch 1
 *       BIT 2 = KEYBOARD ROW 3 and right joystick switch 2
 *       BIT 3 = KEYBOARD ROW 4 and left joystick switch 2
 *       BIT 4 = KEYBOARD ROW 5
 *       BIT 5 = KEYBOARD ROW 6
 *       BIT 6 = KEYBOARD ROW 7
 *       BIT 7 = JOYSTICK COMPARISON INPUT
 *
 * FF01:
 *       BIT 0   Control of HSYNC (63.5µs)  / 0 = IRQ* to CPU Disabled
 *               Interrupt                  \ 1 = IRQ* to CPU Enabled
 *       BIT 1   Control of Interrupt       / 0 = Flag set on the falling edge of HS
 *               Polarity                   \ 1 = Flag set on the rising edge of HS
 *       BIT 2 = Normally 1:    0 = Changes FF00 to the data direction register
 *       BIT 3 = SEL 1:         LSB of the two analog MUX select lines
 *       BIT 4 = 1 Always
 *       BIT 5 = 1 Always
 *       BIT 6 = Not used
 *       BIT 7 = Horizontal sync interrupt flag
 *
 * FF02:
 *       BIT 0 = KEYBOARD COLUMN 1
 *       BIT 1 = KEYBOARD COLUMN 2
 *       BIT 2 = KEYBOARD COLUMN 3
 *       BIT 3 = KEYBOARD COLUMN 4
 *       BIT 4 = KEYBOARD COLUMN 5
 *       BIT 5 = KEYBOARD COLUMN 6
 *       BIT 6 = KEYBOARD COLUMN 7 / RAM SIZE OUTPUT
 *       BIT 7 = KEYBOARD COLUMN 8
 *
 * FF03:
 *       BIT 0 = Control of VSYNC (16.667ms)    / 0 = IRQ* to CPU Disabled
 *               Interrupt                      \ 1 = IRQ* to CPU Enabled
 *       BIT 1 = Control of Interrupt Polarity  / 0 = Sets flag on falling edge FS
 *                                              \ 1 = Sets flag on rising edge FS
 *       BIT 2 = NORMALLY 1:    0 = changes FF02 to the data direction register
 *       BIT 3 = SEL 2:         MSB of the two analog MUX select lines
 *       BIT 4 = 1 Always
 *       BIT 5 = 1 Always
 *       BIT 6 = Not used
 *       BIT 7 = Field sync interrupt flag
 */

#ifndef MC6821_PIA1_H
#define MC6821_PIA1_H

#include <cstdint>

#include <Godot.hpp>
#include <Reference.hpp>
#include <Ref.hpp>

#include "PinsState.hpp"

namespace godot
{
	class Mc6821_PIA1 : public Reference
	{
		GODOT_CLASS(Mc6821_PIA1, Reference)

	private:
	public:
		union DataRegisterA
		{
			std::uint8_t byte;
			struct
			{
				bool keyboard_row_1 : 1;
				bool keyboard_row_2 : 1;
				bool keyboard_row_3 : 1;
				bool keyboard_row_4 : 1;
				bool keyboard_row_5 : 1;
				bool keyboard_row_6 : 1;
				bool keyboard_row_7 : 1;
				bool joystick_comparison_input : 1;
			} bits;
		} data_register_a;

		union ControlRegisterA
		{
			std::uint8_t byte;
			struct
			{
				bool horizontal_sync_interrupt_enable : 1;
				bool horizontal_sync_interrupt_polarity : 1;
				bool accessing_data_register : 1;
				bool mux_select_0 : 1;
				bool bit_5 : 1; // 1 always
				bool bit_4 : 1; // 1 always
				bool not_used : 1;
				bool horizontal_sync_interrupt_flag : 1;
			} bits;
		} control_register_a;

		union DataDirectionRegisterA
		{
			std::uint8_t byte;
			struct
			{
				bool ddra_0 : 1;
				bool ddra_1 : 1;
				bool ddra_2 : 1;
				bool ddra_3 : 1;
				bool ddra_4 : 1;
				bool ddra_5 : 1;
				bool ddra_6 : 1;
				bool ddra_7 : 1;
			} bits;
		} data_direction_register_a;

		union DataRegisterB
		{
			std::uint8_t byte;
			struct
			{
				bool keyboard_column_1 : 1;
				bool keyboard_column_2 : 1;
				bool keyboard_column_3 : 1;
				bool keyboard_column_4 : 1;
				bool keyboard_column_5 : 1;
				bool keyboard_column_6 : 1;
				bool keyboard_column_7 : 1;
				bool keyboard_column_8 : 1;
			} bits;
			struct
			{
				unsigned int ignore : 6;
				bool ram_size_output : 1;
			} output;
		} data_register_b;

		union ControlRegisterB
		{
			std::uint8_t byte;
			struct
			{
				bool vertical_sync_interrupt_enable : 1;
				bool vertical_sync_interrupt_polarity : 1;
				bool accessing_data_register : 1;
				bool mux_select_1 : 1;
				bool bit_5 : 1; // 1 always
				bool bit_4 : 1; // 1 always
				bool not_used : 1;
				bool vertical_sync_interrupt_flag : 1;
			} bits;
		} control_register_b;

		union DataDirectionRegisterB
		{
			std::uint8_t byte;
			struct
			{
				bool ddrb_0 : 1;
				bool ddrb_1 : 1;
				bool ddrb_2 : 1;
				bool ddrb_3 : 1;
				bool ddrb_4 : 1;
				bool ddrb_5 : 1;
				bool ddrb_6 : 1;
				bool ddrb_7 : 1;
			} bits;
		} data_direction_register_b;

		bool debug = false;

		Ref<PinsState> mpu_pins_state;

		// C++ Specific Definitions

		Mc6821_PIA1();

		~Mc6821_PIA1();

		// Godot Specific Definitions

		static void _register_methods();

		void _init(); // our initializer called by Godot

		// Class Definitions

		std::uint8_t read(std::uint8_t address);
		void write(std::uint8_t address, std::uint8_t data);

		void horizontal_sync_transition(bool sync_value);
		void vertical_sync_transition(bool sync_value);

		void set_data_register_a(std::uint8_t new_value);
		std::uint8_t get_data_register_a();

		void set_keyboard_row_1(bool new_value);
		bool get_keyboard_row_1();

		void set_keyboard_row_2(bool new_value);
		bool get_keyboard_row_2();

		void set_keyboard_row_3(bool new_value);
		bool get_keyboard_row_3();

		void set_keyboard_row_4(bool new_value);
		bool get_keyboard_row_4();

		void set_keyboard_row_5(bool new_value);
		bool get_keyboard_row_5();
		
		void set_keyboard_row_6(bool new_value);
		bool get_keyboard_row_6();

		void set_keyboard_row_7(bool new_value);
		bool get_keyboard_row_7();

		void set_joystick_comparison_input(bool new_value);
		bool get_joystick_comparison_input();

		void set_control_register_a(std::uint8_t new_value);
		std::uint8_t get_control_register_a();

		void set_horizontal_sync_interrupt_enable(bool new_value);
		bool get_horizontal_sync_interrupt_enable();

		void set_horizontal_sync_interrupt_polarity(bool new_value);
		bool get_horizontal_sync_interrupt_polarity();

		void set_data_direction_a(bool new_value);
		bool get_data_direction_a();

		void set_mux_select_0(bool new_value);
		bool get_mux_select_0();

		void set_horizontal_sync_interrupt_flag(bool new_value);
		bool get_horizontal_sync_interrupt_flag();

		void set_data_direction_register_a(std::uint8_t new_value);
		std::uint8_t get_data_direction_register_a();

		void set_ddra_0(bool new_value);
		bool get_ddra_0();

		void set_ddra_1(bool new_value);
		bool get_ddra_1();

		void set_ddra_2(bool new_value);
		bool get_ddra_2();

		void set_ddra_3(bool new_value);
		bool get_ddra_3();

		void set_ddra_4(bool new_value);
		bool get_ddra_4();

		void set_ddra_5(bool new_value);
		bool get_ddra_5();

		void set_ddra_6(bool new_value);
		bool get_ddra_6();

		void set_ddra_7(bool new_value);
		bool get_ddra_7();

		void set_data_register_b(std::uint8_t new_value);
		std::uint8_t get_data_register_b();

		void set_keyboard_column_1(bool new_value);
		bool get_keyboard_column_1();

		void set_keyboard_column_2(bool new_value);
		bool get_keyboard_column_2();

		void set_keyboard_column_3(bool new_value);
		bool get_keyboard_column_3();

		void set_keyboard_column_4(bool new_value);
		bool get_keyboard_column_4();

		void set_keyboard_column_5(bool new_value);
		bool get_keyboard_column_5();

		void set_keyboard_column_6(bool new_value);
		bool get_keyboard_column_6();

		void set_keyboard_column_7(bool new_value);
		bool get_keyboard_column_7();

		void set_keyboard_column_8(bool new_value);
		bool get_keyboard_column_8();

		void set_ram_size_output(bool new_value);
		bool get_ram_size_output();

		void set_control_register_b(std::uint8_t new_value);
		std::uint8_t get_control_register_b();

		void set_vertical_sync_interrupt_enable(bool new_value);
		bool get_vertical_sync_interrupt_enable();

		void set_vertical_sync_interrupt_polarity(bool new_value);
		bool get_vertical_sync_interrupt_polarity();

		void set_data_direction_b(bool new_value);
		bool get_data_direction_b();

		void set_mux_select_1(bool new_value);
		bool get_mux_select_1();

		void set_vertical_sync_interrupt_flag(bool new_value);
		bool get_vertical_sync_interrupt_flag();

		void set_data_direction_register_b(std::uint8_t new_value);
		std::uint8_t get_data_direction_register_b();

		void set_ddrb_0(bool new_value);
		bool get_ddrb_0();

		void set_ddrb_1(bool new_value);
		bool get_ddrb_1();

		void set_ddrb_2(bool new_value);
		bool get_ddrb_2();

		void set_ddrb_3(bool new_value);
		bool get_ddrb_3();

		void set_ddrb_4(bool new_value);
		bool get_ddrb_4();

		void set_ddrb_5(bool new_value);
		bool get_ddrb_5();

		void set_ddrb_6(bool new_value);
		bool get_ddrb_6();

		void set_ddrb_7(bool new_value);
		bool get_ddrb_7();
	};
}

#endif